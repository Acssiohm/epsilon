#include <escher/burger_menu_view.h>
#include <kandinsky/color.h>

const uint8_t sBurgerMask[BurgerMenuView::k_burgerSize][BurgerMenuView::k_burgerSize] = {
  {0xFF, 0xFF, 0xFF, 0xE0, 0xA5, 0x83, 0x76, 0x83, 0xA5, 0xE0, 0xFF, 0xFF, 0xFF},
  {0xFF, 0xFD, 0xAF, 0x84, 0xC8, 0xF0, 0xFC, 0xF0, 0xC8, 0x84, 0xAF, 0xFC, 0xFF},
  {0xFF, 0xAC, 0x9C, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x9C, 0xAC, 0xFF},
  {0xE1, 0x86, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x86, 0xE1},
  {0xA6, 0xC8, 0xFF, 0xFF, 0x73, 0x73, 0x73, 0x73, 0x73, 0xFF, 0xFF, 0xC8, 0xA5},
  {0x81, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x82},
  {0x73, 0xFC, 0xFF, 0xFF, 0x73, 0x73, 0x73, 0x73, 0x73, 0xFF, 0xFF, 0xFC, 0x76},
  {0x81, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x82},
  {0xA5, 0xC8, 0xFF, 0xFF, 0x73, 0x73, 0x73, 0x73, 0x73, 0xFF, 0xFF, 0xC8, 0xA5},
  {0xE0, 0x87, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x86, 0xE0},
  {0xFF, 0xB0, 0x9D, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x9D, 0xB0, 0xFF},
  {0xFF, 0xFC, 0xAF, 0x85, 0xC8, 0xF0, 0xFC, 0xF0, 0xC8, 0x85, 0xAF, 0xFC, 0xFF},
  {0xFF, 0xFF, 0xFF, 0xE0, 0xA5, 0x82, 0x76, 0x82, 0xA5, 0xE0, 0xFF, 0xFF, 0xFF}
};

const uint8_t sCircleMask[BurgerMenuView::k_burgerSize][BurgerMenuView::k_burgerSize] = {
  {0xFF, 0xFE, 0xDD, 0x94, 0x4E, 0x1D, 0x03, 0x03, 0x1D, 0x4E, 0x94, 0xDD, 0xFE},
  {0xFF, 0xDD, 0x7D, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x7D, 0xDD},
  {0xF2, 0x94, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x94},
  {0xCC, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E},
  {0xA5, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D},
  {0x91, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03},
  {0x91, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03},
  {0xA5, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D},
  {0xCC, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E},
  {0xF2, 0x94, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x94},
  {0xFF, 0xDD, 0x7D, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x7D, 0xDD},
  {0xFF, 0xFE, 0xDD, 0x94, 0x4E, 0x1D, 0x03, 0x03, 0x1D, 0x4E, 0x94, 0xDD, 0xFE},
  {0xFF, 0xFF, 0xFF, 0xF2, 0xCC, 0xA5, 0x91, 0x91, 0xA4, 0xCC, 0xF2, 0xFF, 0xFF}
};

KDColor sBurgerWorkingBuffer[BurgerMenuView::k_burgerSize*BurgerMenuView::k_burgerSize];

void BurgerMenuView::drawRect(KDContext * ctx, KDRect rect) const {
  /* Draw the burger vertically and horizontally centered in the view. */
  KDCoordinate widthCenter = bounds().width()/2;
  KDCoordinate heightCenter =  bounds().height()/2;
  KDCoordinate burgerHalfSize = k_burgerSize/2;
  KDRect frame(widthCenter - burgerHalfSize, heightCenter - burgerHalfSize, k_burgerSize, k_burgerSize);
  ctx->blendRectWithMask(frame, m_backgroundColor, (const uint8_t *)sCircleMask, sBurgerWorkingBuffer);
  ctx->blendRectWithMask(frame, KDColorBlack, (const uint8_t *)sBurgerMask, sBurgerWorkingBuffer);
}

KDSize BurgerMenuView::minimalSizeForOptimalDisplay() const {
  return KDSize(k_burgerSize, k_burgerSize);
}

void BurgerMenuView::setBackgroundColor(KDColor color) {
  m_backgroundColor = color;
  markRectAsDirty(bounds());
}
